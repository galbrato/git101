Comandos do terminal:
cd <caminho apra pasta>
	cd muda a localisacao para o caminho apssado por argumento
cd ..
	volta para pasta anterior
mkdir <nome_da_pasta>
	cria pasta com nome passado por argumento
ls
	Lista todos os arquivos dentor da pasta atual
nano <nome do arquivo texto>
	abre um editor de texto no terminal
[crtl] l
	limpa o terminal
rm <nome do arquivo>
	deleta o arquivo apssado por parametro

Comandos do git

git init
	Torna a pasta atual em um remositorio git, criando o sistemas de arquivos '.git/'

git status
	Mostrar informaçoes como a sua branch atual, alterações a serem "salvas"(commitadas) na sua pasta, arquivos que não estao trackeds

git add <nome do arquivo a ser comitado>
	Adiciona o arquivo passado por parametro ao seu pacote que AINDA sera comittado("salvado")
	se o arquivo for modificado, deletado, alterado de qualquer forma, ainda tera que ser adicionado com este comando para ser commitado 

git commit
	Abrir um editor de texto para documentar o seu commit, e ira salvar todos os arquivos adicionados com o comando "git add <nome>". 

git commit -m "<texto de documentação>"
	faz o commit sem abrir o editor de texto, e coloca a mensagem passada pro aprametro como a documentação do commit, NOTA: as aspas são parte do comando

git log
	Lista todos os commits feitos

git log --graph --all --abbrev-commit --decorate --oneline
	Pritna os commit em forma de arvore
	
git show <hash do commit a ser mostrado>
	mostra todas as alterações feitas naquele commit
git show <nome_do_arquivo>
	mostrar modificações feitas naquele arquivo no commit atual

git branch
	lista branchs e qual vc esta

git branch <nome_da_branch_a_ser_criada>
	Cria uma branch com aquele nome

git branch -D <nome>
	deleta a o ponteiro branch com o nome passado por parametro

git checkout <nome da brnach>
	MUda a HEAD para a branch passada por parametro,lembrando... mesma coisa que outro checkout

git checkout <hash_deum_commit>
	muda o ponteiro HEAD para um commit identificado pela hash, lembrando que muda o estado do projeto apra o estado que tava naquele  komento do commit

.gitignore
	NAO É UM COMANDO
	arquivo com nomes dos arquivos que o git deve ignorar

